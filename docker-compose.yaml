version: '3'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG4J_LOGGERS: "kafka.controller=DEBUG,kafka.coordinator=DEBUG,kafka.server=DEBUG"
    depends_on:
      - zookeeper

  nginx:
    image: nginx:1.25
    container_name: nginx
    restart: always
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static_producer:/app/static/producer
      - media_producer:/app/media/producer
      - static_consumer:/app/static/consumer
      - media_consumer:/app/media/consumer
    ports:
      - "80:80"
    depends_on:
      - django_producer
      - django_consumer

  db_producer:
    image: postgres:16.2
    container_name: db_producer
    restart: always
    environment:
      POSTGRES_DB: producer
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: 12345
    volumes:
      - producer_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"


  db_consumer:
    image: postgres:16.2
    container_name: db_consumer
    restart: always
    environment:
      POSTGRES_DB: consumer
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: 12345
    command: -p 5433
    volumes:
      - consumer_data:/var/lib/postgresql/data
    expose:
      - "5433"
    ports:
      - "5433:5433"

  django_producer:
    image: ivank35/producerservice-django_producer:latest
    container_name: django_producer
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - static_producer:/app/static/producer
      - media_producer:/app/media/producer
    depends_on:
      - db_producer
    entrypoint: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             exec gunicorn producer_service.wsgi:application -b 0.0.0.0:8000"

  django_consumer:
    image: ivank35/producerservice-django_consumer:latest
    container_name: django_consumer
    restart: always
    ports:
      - "8001:8001"
    volumes:
      - static_consumer:/app/static/consumer
      - media_consumer:/app/media/consumer
    depends_on:
      - db_consumer
    entrypoint: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             exec gunicorn consumer_service.wsgi:application -b 0.0.0.0:8001"

  redis:
    image: redis:7.2
    container_name: redis
    restart: always
    ports:
      - "6379:6379"

  celery:
    image: ivank35/producerservice-celery:latest
    container_name: celery
    restart: always
    command: celery -A consumer_service worker -B -l info
    depends_on:
      - db_consumer
      - django_consumer
      - redis

volumes:
  producer_data:
  consumer_data:
  static_producer:
  media_producer:
  static_consumer:
  media_consumer:
